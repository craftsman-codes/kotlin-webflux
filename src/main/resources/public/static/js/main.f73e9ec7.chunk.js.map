{"version":3,"sources":["App.tsx","index.tsx"],"names":["window","location","hostname","port","protocol","wsHost","includes","TableTop","args","small","width","height","large","useState","dimensions","setDimensions","Paper","style","padding","alt","frame","user","onClick","prev","border","src","Typography","variant","ReactDOM","render","messages","setMessages","message","setMessage","localStorage","getItem","setUser","errors","setErrors","stream","setStream","sessions","setSessions","camera","setCamera","sessionId","storedId","newId","uuid","setItem","loadSessionId","STATIC_OPTIONS","useMemo","shouldReconnect","reconnectAttempts","reconnectInterval","ReadyState","useWebSocket","sendMessage","lastMessage","readyState","send","useCallback","type","content","JSON","stringify","useEffect","incomingMessage","parse","data","id","navigator","mediaDevices","getUserMedia","audio","video","noiseSuppression","then","catch","error","name","getTracks","forEach","track","stop","undefined","sendSnapshot","getVideoTracks","ImageCapture","takePhoto","blob","reader","FileReader","readAsDataURL","onloadend","result","usedSendSnapShot","timeout","setInterval","clearTimeout","sendTextMessage","trim","Promise","resolve","add","Grid","container","item","lg","Object","values","map","key","Button","TextField","label","autoFocus","value","onChange","event","target","onKeyUp","ctrlKey","List","sort","a","b","createdAt","m","ListItem","slice","document","getElementById"],"mappings":"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","file":"static/js/main.f73e9ec7.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useMemo, useState} from 'react'\nimport {Button, Grid, List, ListItem, Paper, TextField, Typography} from '@material-ui/core'\nimport useWebSocket from 'react-use-websocket'\nimport {v4 as uuid} from 'uuid'\n\nconst {hostname, port, protocol} = window.location\nconst wsHost = `${protocol === 'https:' ? 'wss:' : 'ws:'}//${hostname}:${['3000', '3001', '3002', '3003'].includes(port) ? 8080 : port}`\n\ntype VideoFrame = {sessionId: string, user: string, frame: string}\n\nconst TableTop = (args: {frame: VideoFrame}) => {\n  const small = {width: 480, height: 270};\n  const large = {width: 960, height: 540};\n  const [dimensions, setDimensions] = useState(small)\n\n  const toggleSize = () => setDimensions(prev => prev.width === 480 ? large : small)\n\n  return <Paper style={{padding: '10px'}}>\n    <img alt={args.frame.user} onClick={toggleSize} style={{...dimensions, border: 'solid lightgrey 2px'}} src={args.frame.frame} />\n    <Typography variant=\"subtitle1\">{args.frame.user}</Typography>\n  </Paper>\n}\n\nfunction loadSessionId() {\n  const storedId = localStorage.getItem('sessionId')\n  if (storedId) {\n    return storedId\n  } else {\n    const newId = uuid()\n    localStorage.setItem('sessionId', newId)\n    return newId\n  }\n}\n\ntype Message = {id: string, user: string, message: string, createdAt: string}\n\nexport const App = () => {\n  const [messages, setMessages] = useState<Record<string, Message>>({})\n  const [message, setMessage] = useState<string>('')\n  const [user, setUser] = useState<string>(localStorage.getItem('username') || 'anonymous')\n  const [errors, setErrors] = useState<string[]>([])\n  const [stream, setStream] = useState<MediaStream>()\n  const [sessions, setSessions] = useState<Record<string, VideoFrame>>({})\n  const [camera, setCamera] = useState(false)\n    \n  const sessionId = loadSessionId()\n\n  const STATIC_OPTIONS = useMemo(() => ({\n    shouldReconnect: () => true,\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n  }), []);\n  const ReadyState = [\n    'CONNECTING',\n    'OPEN',\n    'CLOSING',\n    'CLOSED'\n  ]\n\n  const [sendMessage, lastMessage, readyState] = useWebSocket(`${wsHost}/socket`, STATIC_OPTIONS);\n\n\n  type MessageType = 'AddMessage' | 'LoadMessages' | 'SendSnapshot'\n  const send = useCallback(\n    (type: MessageType, content: object = {}) => sendMessage(JSON.stringify({...content, type})),\n    [sendMessage]\n  )\n  const add = (message: string, user: string) => Promise.resolve(send('AddMessage', {message, user}))\n\n  useEffect(() => {\n    if (!lastMessage && ReadyState[readyState] === 'OPEN') { send('LoadMessages') }\n  }, [readyState, lastMessage, ReadyState, send])\n\n  useEffect(() => {\n    if (lastMessage) {\n      const incomingMessage = JSON.parse(lastMessage.data);\n      switch (incomingMessage.type) {\n        case 'Message':\n          setMessages((prev) => ({...prev, [incomingMessage.id]: incomingMessage}))\n          break;\n        case 'VideoFrame':\n          setSessions((prev) => ({...prev, [incomingMessage.sessionId]: incomingMessage}))\n          break;\n        default: break;\n      }\n    }\n  }, [lastMessage])\n\n\n  useEffect(() => {\n    if (camera) {\n      if (!stream) {\n        navigator.mediaDevices.getUserMedia({\n          audio: false,\n          video: {\n            // width: {ideal: 1920},\n            // height: {ideal: 1080},\n            noiseSuppression: true,\n            // frameRate: {ideal: 1, max: 1}\n          }\n        })\n          .then(setStream)\n          .catch(function (error) {\n            if (error.name === 'ConstraintNotSatisfiedError') {\n              setErrors(prev => [...prev, 'The resolution x px is not supported by your device.']);\n            } else if (error.name === 'PermissionDeniedError') {\n              setErrors(prev => [...prev, 'Permissions have not been granted to use your camera and ' +\n              'microphone, you need to allow the page access to your devices in ' +\n              'order for the demo to work.']);\n            }\n            setErrors(prev => [...prev, 'getUserMedia error: ' + error.name]);\n          })\n      }\n    } else {\n      if (stream) {\n        stream.getTracks()\n          .forEach((track) => track.stop())\n        setStream(undefined)\n        setErrors([])\n      }\n    }\n  }, [camera, stream])\n\n  const sendSnapshot = () => {\n    if (ReadyState[readyState] === 'OPEN' && stream?.getVideoTracks()[0]?.readyState === 'live') {\n      // @ts-ignore ImageCapture\n      new ImageCapture(stream.getVideoTracks()[0]).takePhoto()\n        .then((blob: Blob) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(blob)\n          reader.onloadend = (() => { send('SendSnapshot', {sessionId: sessionId, frame: reader.result, user: user}) })\n        })\n    }\n  }\n\n  const usedSendSnapShot = useCallback(sendSnapshot, [ReadyState, readyState, stream])\n\n  useEffect(() => {\n    if (camera) {\n      const timeout = setInterval(() => usedSendSnapShot(), 1000)\n\n      return () => {clearTimeout(timeout)}\n    }\n  }, [camera, usedSendSnapShot])\n\n  const sendTextMessage = () => {\n    if (message.trim()) {\n      add(message.trim(), user)\n        .then(() => setMessage(''))\n    }\n  }\n\n  return <>\n    <Grid container>\n      <Grid container item lg={10}>\n        {\n          Object.values(sessions).map(frame =>\n            <Grid key={frame.sessionId} item>\n              <TableTop frame={frame} />\n            </Grid>\n          )\n        }\n      </Grid>\n      <Grid item lg={2}>\n        <div>Websocket is {ReadyState[readyState]}</div>\n        <Button\n          variant=\"contained\"\n          onClick={() => setCamera(prev => !prev)}>Toggle video ({camera ? 'On' : 'Off'})</Button>\n        <Button variant=\"contained\" onClick={sendSnapshot} >Send snapshot</Button>\n        <ul>{errors.map(error => <li>{error}</li>)}</ul>\n        <TextField\n          variant=\"filled\"\n          label=\"User\"\n          autoFocus={true}\n          value={user}\n          onChange={event => {\n            localStorage.setItem('username', event.target.value)\n            setUser(event.target.value)\n          }}\n        />\n        <TextField\n          variant=\"filled\"\n          label=\"Type your message\"\n          autoFocus={true}\n          value={message}\n          onChange={event => setMessage(event.target.value)}\n          onKeyUp={event => { if (event.ctrlKey && event.key) { sendTextMessage() } }}\n        />\n        <Button variant=\"contained\" onClick={sendTextMessage}>Send Message (ctrl+⏎)</Button>\n        <List>\n          {\n            Object.values(messages)\n              .sort((a, b) => a.createdAt > b.createdAt ? 1 : (a.createdAt < b.createdAt ? -1 : 0))\n              .map(m => <ListItem key={m.createdAt}>{m.createdAt.slice(11, 19)} [{m.user}]: {m.message}</ListItem>)\n          }\n        </List>\n\n      </Grid>\n    </Grid>\n  </>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}