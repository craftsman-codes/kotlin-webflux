{"version":3,"sources":["App.tsx","index.tsx"],"names":["window","location","hostname","port","protocol","host","wsHost","ReactDOM","render","useState","messages","setMessages","message","setMessage","user","setUser","STATIC_OPTIONS","useMemo","shouldReconnect","event","reconnectAttempts","reconnectInterval","useWebSocket","lastMessage","useEffect","prev","JSON","parse","data","fetch","then","response","json","result","Paper","Grid","container","item","lg","List","map","m","ListItem","key","createdAt","slice","TextField","variant","label","autoFocus","value","onChange","target","onKeyUp","ctrlKey","trim","method","headers","body","stringify","add","document","getElementById"],"mappings":"kPAImCA,OAAOC,SAAnCC,E,EAAAA,SAAUC,E,EAAAA,KAAMC,E,EAAAA,SACjBC,EAAI,UAAMD,EAAN,aAAmBF,EAAnB,YAAwC,SAATC,EAAkB,KAAOA,GAC5DG,EAAM,UAAmB,WAAbF,EAAwB,OAAS,MAAvC,aAAiDF,EAAjD,YAAsE,SAATC,EAAkB,KAAOA,GCFlGI,IAASC,OAAO,mBDIG,WAAO,IAAD,EACSC,mBAA+D,IADxE,mBAChBC,EADgB,KACNC,EADM,OAEOF,mBAAiB,IAFxB,mBAEhBG,EAFgB,KAEPC,EAFO,OAGCJ,mBAAiB,aAHlB,mBAGhBK,EAHgB,KAGVC,EAHU,KAKjBC,EAAiBC,mBAAQ,iBAAO,CACpCC,gBAAiB,SAACC,GAAD,OAAuC,GACxDC,kBAAmB,GACnBC,kBAAmB,OACjB,IATmB,EAWYC,IAAa,GAAD,OAAIhB,EAAJ,WAAqBU,GAX7C,mBAWHO,GAXG,WAavBC,qBAAU,WACJD,GACFZ,GAAY,SAAAc,GAAI,4BAAQA,GAAR,CAAcC,KAAKC,MAAMJ,EAAYK,aAEtD,CAACL,IAiBJ,OAFAC,qBAAU,WAbSK,MAAM,GAAD,OAAIxB,EAAJ,kBACrByB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAItB,EAAYsB,QAWF,IAErB,kBAACC,EAAA,EAAD,KACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,KACG7B,EAAS8B,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAEG,WAAYH,EAAEG,UAAUC,MAAM,GAAI,IAAnD,KAA0DJ,EAAE3B,KAA5D,MAAqE2B,EAAE7B,cAG9F,kBAACuB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACQ,EAAA,EAAD,CACEC,QAAQ,SACRC,MAAM,OACNC,WAAW,EACXC,MAAOpC,EACPqC,SAAU,SAAAhC,GAAK,OAAIJ,EAAQI,EAAMiC,OAAOF,UAE1C,kBAACJ,EAAA,EAAD,CACEC,QAAQ,SACRC,MAAM,oBACNC,WAAW,EACXC,MAAOtC,EACPuC,SAAU,SAAAhC,GAAK,OAAIN,EAAWM,EAAMiC,OAAOF,QAC3CG,QAAS,SAAAlC,GACHA,EAAMmC,SAAWnC,EAAMwB,KAAO/B,EAAQ2C,QAjCxC,SAAC3C,EAAiBE,GAAlB,OAAmCe,MAAM,GAAD,OAAIxB,EAAJ,gBAAwB,CAC1EmD,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMhC,KAAKiC,UAAU,CAAC/C,UAASE,WA4BrB8C,CAAIhD,EAAQ2C,OAAQzC,GAAMgB,MAAK,kBAAMjB,EAAW,eC7D9C,MAAQgD,SAASC,eAAe,W","file":"static/js/main.443776d4.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useState} from 'react'\nimport {Grid, List, ListItem, Paper, TextField} from \"@material-ui/core\"\nimport useWebSocket from 'react-use-websocket';\n\nconst {hostname, port, protocol} = window.location\nconst host = `${protocol}//${hostname}:${port === '3000' ? 8080 : port}`\nconst wsHost = `${protocol === 'https:' ? 'wss:' : 'ws:'}//${hostname}:${port === '3000' ? 8080 : port}`\n\nexport const App = () => {\n  const [messages, setMessages] = useState<{user: string, message: string, createdAt: string}[]>([])\n  const [message, setMessage] = useState<string>('')\n  const [user, setUser] = useState<string>('anonymous')\n\n  const STATIC_OPTIONS = useMemo(() => ({\n    shouldReconnect: (event: WebSocketEventMap['close']) => true,\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n  }), []);\n\n  const [sendMessage, lastMessage] = useWebSocket(`${wsHost}/socket`, STATIC_OPTIONS);\n\n  useEffect(() => {\n    if (lastMessage) {\n      setMessages(prev => [...prev, JSON.parse(lastMessage.data)])\n    }\n  }, [lastMessage])\n\n  const load = () => fetch(`${host}/api/messages`)\n    .then(response => response.json())\n    .then(result => setMessages(result))\n\n  const add = (message: string, user: string) => fetch(`${host}/api/message`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({message, user})\n  })\n\n  useEffect(() => { load() }, [])\n\n  return <Paper>\n    <Grid container>\n      <Grid item lg={9}>\n        <List>\n          {messages.map(m => <ListItem key={m.createdAt}>{m.createdAt.slice(11, 19)} [{m.user}]: {m.message}</ListItem>)}\n        </List>\n      </Grid>\n      <Grid item lg={3}>\n        <TextField\n          variant=\"filled\"\n          label=\"User\"\n          autoFocus={true}\n          value={user}\n          onChange={event => setUser(event.target.value)}\n        />\n        <TextField\n          variant=\"filled\"\n          label=\"Type your message\"\n          autoFocus={true}\n          value={message}\n          onChange={event => setMessage(event.target.value)}\n          onKeyUp={event => {\n            if (event.ctrlKey && event.key && message.trim()) {\n              add(message.trim(), user).then(() => setMessage(''))\n            }\n          }}\n        />\n      </Grid>\n    </Grid>\n  </Paper>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}