{"version":3,"sources":["App.tsx","index.tsx"],"names":["window","location","hostname","port","protocol","wsHost","includes","TableTop","args","canvasRef","useRef","useState","context","setContext","useEffect","current","ctx","getContext","frame","image","Image","src","onload","drawImage","width","height","ref","ReactDOM","render","messages","setMessages","message","setMessage","user","setUser","errors","setErrors","stream","setStream","sessions","setSessions","STATIC_OPTIONS","useMemo","shouldReconnect","reconnectAttempts","reconnectInterval","ReadyState","useWebSocket","sendMessage","lastMessage","readyState","send","useCallback","messageType","content","JSON","stringify","incomingMessage","parse","data","console","log","type","prev","joining","Object","fromEntries","entries","filter","leaving","sessionId","navigator","mediaDevices","getUserMedia","audio","video","noiseSuppression","then","catch","error","name","Paper","Grid","container","item","lg","map","id","key","onClick","getVideoTracks","stop","ImageCapture","takePhoto","blob","reader","FileReader","readAsDataURL","onloadend","result","TextField","variant","label","autoFocus","value","onChange","event","target","onKeyUp","ctrlKey","trim","Promise","resolve","add","List","m","ListItem","createdAt","slice","document","getElementById"],"mappings":"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","file":"static/js/main.6e5b6472.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {Grid, List, ListItem, Paper, TextField} from '@material-ui/core'\nimport useWebSocket from 'react-use-websocket';\n\nconst {hostname, port, protocol} = window.location\nconst wsHost = `${protocol === 'https:' ? 'wss:' : 'ws:'}//${hostname}:${['3000', '3001', '3002', '3003'].includes(port) ? 8080 : port}`\n\nconst TableTop = (args: {frame: string|null}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [context, setContext] = useState<CanvasRenderingContext2D>()\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d')\n      if (ctx) { setContext(ctx) }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (context && args.frame) {\n      const image = new Image()\n      image.src = args.frame\n      image.onload = () => { context?.drawImage(image, 0, 0, 960, 540) }\n    }\n  }, [args.frame])\n\n  return <canvas width={480} height={270} ref={canvasRef} />\n}\n\nexport const App = () => {\n  const [messages, setMessages] = useState<{user: string, message: string, createdAt: string}[]>([])\n  const [message, setMessage] = useState<string>('')\n  const [user, setUser] = useState<string>('anonymous')\n  const [errors, setErrors] = useState<string[]>([])\n  const [stream, setStream] = useState<MediaStream>()\n  const [sessions, setSessions] = useState<Record<string, string|null>>({})\n\n  const STATIC_OPTIONS = useMemo(() => ({\n    shouldReconnect: () => true,\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n  }), []);\n  const ReadyState = [\n    'CONNECTING',\n    'OPEN',\n    'CLOSING',\n    'CLOSED'\n  ]\n\n  const [sendMessage, lastMessage, readyState] = useWebSocket(`${wsHost}/socket`, STATIC_OPTIONS);\n\n\n  type MessageType = 'AddMessage' | 'LoadMessages' | 'VideoFrame'\n  const send = useCallback(\n    (messageType: MessageType, content: object = {}) => sendMessage(JSON.stringify({...content, messageType})),\n    [sendMessage]\n  )\n  const add = (message: string, user: string) => Promise.resolve(send('AddMessage', {message, user}))\n\n  useEffect(() => {\n    if (!lastMessage && ReadyState[readyState] === 'OPEN') { send('LoadMessages') }\n  }, [readyState, lastMessage, ReadyState, send])\n\n  useEffect(() => {\n    if (lastMessage) {\n      const incomingMessage = JSON.parse(lastMessage.data);\n      console.log(incomingMessage)\n      switch (incomingMessage.type) {\n        case 'Message':\n          setMessages(prev => [...prev, incomingMessage])\n          break;\n        case 'JoiningUser':\n          setSessions(prev => ({...prev, [incomingMessage.joining]: null}))\n          break;\n        case 'LeavingUser':\n          setSessions(prev => Object.fromEntries(Object.entries(prev).filter(([id]) => id != incomingMessage.leaving)))\n          break;\n        case 'SessionVideoFrame':\n          console.log('try store frame', sessions, sessions[incomingMessage.sessionId])\n          if (sessions[incomingMessage.sessionId] === null) {\n            console.log('store frame')\n            setSessions((prev) => ({...prev, [incomingMessage.sessionId]: incomingMessage.frame}))\n          }\n          break;\n        default: break;\n      }\n    }\n  }, [lastMessage])\n\n\n  useEffect(() => {\n    if (ReadyState[readyState] === 'OPEN' && !stream) {\n      navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: {\n          // width: {ideal: 1920},\n          // height: {ideal: 1080},\n          noiseSuppression: true,\n          // frameRate: {ideal: 1, max: 1}\n        }\n      })\n        .then(setStream)\n        .catch(function (error) {\n          if (error.name === 'ConstraintNotSatisfiedError') {\n            setErrors(prev => [...prev, 'The resolution x px is not supported by your device.']);\n          } else if (error.name === 'PermissionDeniedError') {\n            setErrors(prev => [...prev, 'Permissions have not been granted to use your camera and ' +\n            'microphone, you need to allow the page access to your devices in ' +\n            'order for the demo to work.']);\n          }\n          setErrors(prev => [...prev, 'getUserMedia error: ' + error.name]);\n        })\n    }\n  }, [readyState, ReadyState, stream])\n\n  const sendSnapshot = () => {\n    if (ReadyState[readyState] === 'OPEN' && stream && stream?.getVideoTracks()[0]?.readyState === 'live') {\n      // @ts-ignore ImageCapture\n      new ImageCapture(stream.getVideoTracks()[0]).takePhoto()\n        .then((blob: Blob) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(blob)\n          reader.onloadend = (() => { send('VideoFrame', {frame: reader.result, user: 'test'}) })\n        })\n    }\n  }\n\n  return <Paper>\n    <Grid container>\n      <Grid container item lg={10}>\n        {\n          Object.entries(sessions).map(([id, frame]) =>\n            <Grid item lg={6}>\n              <div>{id}</div>\n              <TableTop key={id} frame={frame} />\n            </Grid>\n          )\n        }\n      </Grid>\n      <Grid item lg={2}>\n        <div>Websocket is {ReadyState[readyState]}</div>\n        <button onClick={() => {stream?.getVideoTracks()[0]?.stop()}} >stop</button>\n        <button onClick={sendSnapshot} >send</button>\n        <ul>{errors.map(error => <li>{error}</li>)}</ul>\n        <TextField\n          variant=\"filled\"\n          label=\"User\"\n          autoFocus={true}\n          value={user}\n          onChange={event => setUser(event.target.value)}\n        />\n        <TextField\n          variant=\"filled\"\n          label=\"Type your message\"\n          autoFocus={true}\n          value={message}\n          onChange={event => setMessage(event.target.value)}\n          onKeyUp={event => {\n            if (event.ctrlKey && event.key && message.trim()) {\n              add(message.trim(), user).then(() => setMessage(''))\n            }\n          }}\n        />\n        <List>\n          {messages.map(m => <ListItem key={m.createdAt}>{m.createdAt.slice(11, 19)} [{m.user}]: {m.message}</ListItem>)}\n        </List>\n\n      </Grid>\n    </Grid>\n  </Paper>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}