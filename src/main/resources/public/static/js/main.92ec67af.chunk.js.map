{"version":3,"sources":["App.tsx","index.tsx"],"names":["window","location","hostname","port","protocol","wsHost","includes","TableTop","args","small","width","height","border","large","position","top","left","useState","dimensions","setDimensions","Paper","style","padding","alt","frame","user","onClick","prev","transform","rotation","src","Typography","variant","ReactDOM","render","messages","setMessages","message","setMessage","localStorage","getItem","setUser","errors","setErrors","stream","setStream","sessions","setSessions","camera","setCamera","delay","setDelay","degrees","setDegrees","sessionId","storedId","newId","uuid","setItem","loadSessionId","STATIC_OPTIONS","useMemo","shouldReconnect","reconnectAttempts","reconnectInterval","ReadyState","useWebSocket","sendMessage","lastMessage","readyState","send","useCallback","type","content","JSON","stringify","useEffect","incomingMessage","parse","data","id","navigator","mediaDevices","getUserMedia","audio","video","noiseSuppression","then","catch","error","name","getTracks","forEach","track","stop","undefined","sendSnapShotCallback","getVideoTracks","ImageCapture","takePhoto","blob","reader","FileReader","readAsDataURL","onloadend","result","timeout","setInterval","clearTimeout","sendTextMessage","trim","Promise","resolve","add","Grid","container","item","lg","Object","values","map","key","Button","TextField","label","value","onChange","event","parseInt","target","autoFocus","onKeyUp","ctrlKey","List","sort","a","b","createdAt","m","ListItem","slice","document","getElementById"],"mappings":"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","file":"static/js/main.92ec67af.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useMemo, useState} from 'react'\nimport {Button, Grid, List, ListItem, Paper, TextField, Typography} from '@material-ui/core'\nimport useWebSocket from 'react-use-websocket'\nimport {v4 as uuid} from 'uuid'\n\nconst {hostname, port, protocol} = window.location\nconst wsHost = `${protocol === 'https:' ? 'wss:' : 'ws:'}//${hostname}:${['3000', '3001', '3002', '3003'].includes(port) ? 8080 : port}`\n\ntype VideoFrame = {sessionId: string, user: string, frame: string, rotation: number}\n\nconst TableTop = (args: {frame: VideoFrame}) => {\n  const small = {\n    width: 480,\n    height: 270,\n    border: 'solid lightgrey 2px',\n  }\n  const large = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n  }\n  const [dimensions, setDimensions] = useState<Record<string, any>>(small)\n\n  const toggleSize = () => setDimensions(prev => prev.width === 480 ? large : small)\n\n  return <Paper style={{padding: '10px'}}>\n    <img alt={args.frame.user} onClick={toggleSize} style={{\n      ...dimensions,\n      transform: `rotate(${args.frame.rotation}deg)`\n    }} src={args.frame.frame} />\n    <Typography variant=\"subtitle1\">{args.frame.user}</Typography>\n  </Paper>\n}\n\nfunction loadSessionId() {\n  const storedId = localStorage.getItem('sessionId')\n  if (storedId) {\n    return storedId\n  } else {\n    const newId = uuid()\n    localStorage.setItem('sessionId', newId)\n    return newId\n  }\n}\n\ntype Message = {id: string, user: string, message: string, createdAt: string}\n\nexport const App = () => {\n  const [messages, setMessages] = useState<Record<string, Message>>({})\n  const [message, setMessage] = useState<string>('')\n  const [user, setUser] = useState<string>(localStorage.getItem('username') || 'anonymous')\n  const [errors, setErrors] = useState<string[]>([])\n  const [stream, setStream] = useState<MediaStream>()\n  const [sessions, setSessions] = useState<Record<string, VideoFrame>>({})\n  const [camera, setCamera] = useState(false)\n  const [delay, setDelay] = useState(5)\n  const [degrees, setDegrees] = useState(0)\n\n  const sessionId = loadSessionId()\n\n  const STATIC_OPTIONS = useMemo(() => ({\n    shouldReconnect: () => true,\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n  }), []);\n  const ReadyState = [\n    'CONNECTING',\n    'OPEN',\n    'CLOSING',\n    'CLOSED'\n  ]\n\n  const [sendMessage, lastMessage, readyState] = useWebSocket(`${wsHost}/socket`, STATIC_OPTIONS);\n\n\n  type MessageType = 'AddMessage' | 'LoadMessages' | 'SendSnapshot'\n  const send = useCallback(\n    (type: MessageType, content: object = {}) => sendMessage(JSON.stringify({...content, type})),\n    [sendMessage]\n  )\n  const add = (message: string, user: string) => Promise.resolve(send('AddMessage', {message, user}))\n\n  useEffect(() => {\n    if (!lastMessage && ReadyState[readyState] === 'OPEN') { send('LoadMessages') }\n  }, [readyState, lastMessage, ReadyState, send])\n\n  useEffect(() => {\n    if (lastMessage) {\n      const incomingMessage = JSON.parse(lastMessage.data);\n      switch (incomingMessage.type) {\n        case 'Message':\n          setMessages((prev) => ({...prev, [incomingMessage.id]: incomingMessage}))\n          break;\n        case 'VideoFrame':\n          setSessions((prev) => ({...prev, [incomingMessage.sessionId]: incomingMessage}))\n          break;\n        default: break;\n      }\n    }\n  }, [lastMessage])\n\n\n  useEffect(() => {\n    if (camera) {\n      if (!stream) {\n        navigator.mediaDevices.getUserMedia({\n          audio: false,\n          video: {\n            // width: {ideal: 1920},\n            // height: {ideal: 1080},\n            noiseSuppression: true,\n            // frameRate: {ideal: 1, max: 1}\n          }\n        })\n          .then(setStream)\n          .catch(function (error) {\n            if (error.name === 'ConstraintNotSatisfiedError') {\n              setErrors(prev => [...prev, 'The resolution x px is not supported by your device.']);\n            } else if (error.name === 'PermissionDeniedError') {\n              setErrors(prev => [...prev, 'Permissions have not been granted to use your camera and ' +\n              'microphone, you need to allow the page access to your devices in ' +\n              'order for the demo to work.']);\n            }\n            setErrors(prev => [...prev, 'getUserMedia error: ' + error.name]);\n          })\n      }\n    } else {\n      if (stream) {\n        stream.getTracks()\n          .forEach((track) => track.stop())\n        setStream(undefined)\n        setErrors([])\n      }\n    }\n  }, [camera, stream])\n\n  const sendSnapshot = () => {\n    if (ReadyState[readyState] === 'OPEN' && stream?.getVideoTracks()[0]?.readyState === 'live') {\n      // @ts-ignore ImageCapture\n      new ImageCapture(stream.getVideoTracks()[0]).takePhoto()\n        .then((blob: Blob) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(blob)\n          reader.onloadend = (() => { send('SendSnapshot', {\n            sessionId: sessionId,\n            frame: reader.result,\n            user: user,\n            rotation: degrees\n          }) })\n        })\n    }\n  }\n\n  const sendSnapShotCallback = useCallback(sendSnapshot, [ReadyState, readyState, stream])\n\n  useEffect(() => {\n    if (camera) {\n      const timeout = setInterval(() => sendSnapShotCallback(), delay * 1000)\n\n      return () => {clearTimeout(timeout)}\n    }\n  }, [camera, delay, sendSnapShotCallback])\n\n  const sendTextMessage = () => {\n    if (message.trim()) {\n      add(message.trim(), user)\n        .then(() => setMessage(''))\n    }\n  }\n\n  return <>\n    <Grid container>\n      <Grid container item lg={10}>\n        {\n          Object.values(sessions).map(frame =>\n            <Grid key={frame.sessionId} item>\n              <TableTop frame={frame} />\n            </Grid>\n          )\n        }\n      </Grid>\n      <Grid item lg={2}>\n        <div>Websocket is {ReadyState[readyState]}</div>\n        <Button\n          variant=\"contained\"\n          onClick={() => setCamera(prev => !prev)}>Toggle video ({camera ? 'On' : 'Off'})</Button>\n        <ul>{errors.map(error => <li>{error}</li>)}</ul>\n        <TextField\n          variant=\"filled\"\n          label=\"Snapshot delay (s)\"\n          value={delay}\n          type=\"number\"\n          onChange={event => {\n            if (parseInt(event.target.value, 10) > 0) {\n              setDelay(parseInt(event.target.value, 10 ))\n            }\n          }}\n        />\n        <Button\n          variant=\"contained\"\n          onClick={() => setDegrees(prev => (prev + 90) % 360)}\n        >Rotation</Button>\n        <TextField\n          variant=\"filled\"\n          label=\"User\"\n          autoFocus={true}\n          value={user}\n          onChange={event => {\n            localStorage.setItem('username', event.target.value)\n            setUser(event.target.value)\n          }}\n        />\n        <TextField\n          variant=\"filled\"\n          label=\"Type your message\"\n          autoFocus={true}\n          value={message}\n          onChange={event => setMessage(event.target.value)}\n          onKeyUp={event => { if (event.ctrlKey && event.key) { sendTextMessage() } }}\n        />\n        <Button variant=\"contained\" onClick={sendTextMessage}>Send Message (ctrl+⏎)</Button>\n        <List>\n          {\n            Object.values(messages)\n              .sort((a, b) => a.createdAt > b.createdAt ? 1 : (a.createdAt < b.createdAt ? -1 : 0))\n              .map(m => <ListItem key={m.createdAt}>{m.createdAt.slice(11, 19)} [{m.user}]: {m.message}</ListItem>)\n          }\n        </List>\n\n      </Grid>\n    </Grid>\n  </>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}